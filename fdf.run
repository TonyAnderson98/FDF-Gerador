#!/bin/bash
export LC_NUMERIC="en_US.UTF-8"
dir=`pwd`

verde="\033[1;32m"
vermelho="\033[1;31m"
limpar="\033[0m"

# =================================================================================
#						Flags
# =================================================================================
# Execução
QUIET=FALSE
VERBOSE=0
KEEP_TEMP=0
# Dependências
DEP_GFORTRAN=FALSE
DEP_XCRYSDEN=FALSE
DEP_XMAKEMOL=FALSE
DEP_XMGRACE=FALSE
DEP_ZENITY=FALSE
# =================================================================================


# =================================================================================
#						Função Quiet
# =================================================================================
#	Objetivo:			 -	Exibir logs no terminal se a flag quiet = False
#	Variavel
#		$1               -	Mensagem passada na chamada da função
#
log_quiet(){
    if test "$QUIET" = FALSE; then
        printf "$1"
    fi
}
# =================================================================================


# =================================================================================
#						Função Verbose
# =================================================================================
#	Objetivo:			 -	Exibir logs detalhados no terminal se a flag verbose = True
#	Variavel
#		$1               -	Mensagem passada na chamada da função
#
log_verbose(){
    if test "$VERBOSE" = TRUE; then
        printf "$1"
    fi
}
# =================================================================================



# =================================================================================
#						Ajuda
# =================================================================================
VERSAO="Versão 1.0"

OPCAO_INVALIDA="Opção inválida. Por favor use $0 -h ou $0 --help para ajuda."

MENSAGEM_AJUDA="
Uso: $0 [opção] [...]

Para o correto funcionamento do fdf.run, você precisa 
de um arquivo.fdf qualquer (para servir de modelo) e  
do seu arquivo.xyz com as coordenadas atômicas.

Opções de ajuda:
    -h, --help                  Exibe todas as opções de ajuda
    -v, --version               Exibe a versão do programa e sai
    -V, --verbose               Mostra informações adicionais na saída
    -q, --quiet                 Não mostra nada na saída, é uma excecução quieta
    -k, --keep-temp             Mantém arquivos temporários 

$VERSAO
Para relatos de bugs, por favor veja https://github.com/TonyAnderson98/FDF-Gerador"

# Verificação de argumentos passados na excecução do programa

while test -n "$1"
do
    case "$1" in
        -h | --help)
            echo -e "$MENSAGEM_AJUDA"
            exit 0
            ;;
        -v | --version)
            echo "$VERSAO"
            exit 0
            ;;
        -V | --verbose)
            VERBOSE=TRUE
            ;;
        -q | --quiet)
            QUIET=TRUE
            ;;
        -k | --keep-temp)
            KEEP_TEMP=TRUE
            ;;
        *)
            if test -n "$1"; then
                echo "$OPCAO_INVALIDA"
                exit 1
            fi
    esac
    # Opção $1 já tratada, deslocando parâmetros posicionais
    shift
done
# =================================================================================



exibir_status_dependencia() {
    if [ $1 = TRUE ]; then
        printf "[ ${verde}OK${limpar} ] $2 encontrado em "
        command -v $3
    else
        printf "[${vermelho}ERRO${limpar}] $2 não encontrado! \n"
    fi
}







# =================================================================================
#							VERIFICANDO DEPENDÊNCIAS
# =================================================================================
#	Objetivo: Verificar se as dependências estão satisfeitas
# ---------------------------------------------------------------------------------

printf "Verificando dependências:\n\n"

if command -v gfortran &> /dev/null; then
    DEP_GFORTRAN=TRUE
fi
# ---------------------------------------------------------------------------------
if command -v zenity &> /dev/null; then
    DEP_ZENITY=TRUE
fi
# ---------------------------------------------------------------------------------
if command -v xcrysden &> /dev/null; then
    DEP_XCRYSDEN=TRUE                   
fi
# ---------------------------------------------------------------------------------
if command -v xmakemol &> /dev/null; then
    DEP_XMAKEMOL=TRUE                     
fi
# ---------------------------------------------------------------------------------
if command -v xmgrace &> /dev/null; then
    DEP_XMGRACE=TRUE                     
fi
# =================================================================================



# =================================================================================
#							Log
# =================================================================================
#	Objetivo: 
# ---------------------------------------------------------------------------------
exibir_status_dependencia  "$DEP_GFORTRAN" "FORTRAN" "gfortran"
exibir_status_dependencia  "$DEP_XCRYSDEN" "XCrysDen" "xcrysden"
exibir_status_dependencia  "$DEP_XMAKEMOL" "Xmakemol" "xmakemol"
exibir_status_dependencia  "$DEP_XMGRACE"  "Xmgrace" "xmgrace"
echo ""
 



























# =================================================================================
# 						Resolver dependências
# =================================================================================
# 	Objetivo:			 -	Resolver dependências quebradas

if [ $DEP_GFORTRAN = FALSE ]; then
    zenity --question  \
    --title="Gfortran" \
    --text "Deseja instalar o gfortran agora?" \
    --ok-label="Sim" \
    --cancel-label="Não"

    if [ $? = 0 ]; then
        sudo apt-get install gfortran
    else
        echo "Ok. Não insalaremos o gfortran, mas não será possível continuar. Saíndo..."
        exit 1
    fi
fi

if [ $DEP_ZENITY = FALSE ]; then
    zenity --question  \
    --title="Zenity" \
    --text "Deseja instalar o zenity agora?" \
    --ok-label="Sim" \
    --cancel-label="Não"

    if [ $? = 0 ]; then
        sudo apt-get install zenity
    else
        echo "Ok. Não insalaremos o zenity. Continuando..."
        exit 1
    fi
fi

if [ $DEP_XCRYSDEN = FALSE ]; then
    zenity --question  \
    --title="xcrysden" \
    --text "Deseja instalar o xcrysden agora?" \
    --ok-label="Sim" \
    --cancel-label="Não"

    if [ $? = 0 ]; then
        sudo apt-get install xcrysden
    else
        echo "Ok. Não insalaremos o xcrysden, mas não será possível continuar. Saíndo..."
        exit 1
    fi
fi

if [ $DEP_XMAKEMOL = FALSE ]; then
    zenity --question  \
    --title="Xmakemol ausente!" \
    --text "Deseja instalar agora?" \
    --ok-label="Sim" \
    --cancel-label="Não"

    if [ $? = 0 ]; then
        sudo apt-get install xmakemol
    else
        echo "Ok. Não instalaremos o xmakemol. Ainda é possível continuar sem ele,"
        echo "mas com funcionalidades limitadas (otaro). Continuando..."
        echo ""
    fi
fi
# =================================================================================





# =================================================================================
#						Encontrar o nome dos arquivos .fdf e .xyz
# =================================================================================
#	Objetivo:			 -	Encontrar e armazenar em variáveis o nome dos
#                               arquivos .fdf e .xyz dentro da pasta
#	Variavel
#		nome_arquivo_fdf -	Variável que armazena o nome do arquivo fdf
#		nome_arquivo_xyz -	Variável que armazena o nome do arquivo xyz
#

if [ -f *.fdf ]; then
    nome_arquivo_fdf=`ls *.fdf`
else
    printf "${vermelho}Erro: arquivo *.fdf não encontrado. \n${limpar}"    
    exit 1
fi

if [ -f *.xyz ]; then
    nome_arquivo_xyz=`ls *.xyz`
else
    printf "${vermelho}Erro: arquivo *.xyz não encontrado.\n${limpar}"    
    exit 1
fi


# Log terminal: Exibir (se necessário) nomes dos arquivos fdf e xyz
log_quiet "Arquivo fdf: ${verde}$nome_arquivo_fdf${limpar} \n"
log_quiet "Arquivo xyz: ${verde}$nome_arquivo_xyz${limpar} \n"






# =================================================================================
#						ChemicalSpeciesLabel
# =================================================================================
#	Objetivo:			-	Identificar a PRIMEIRA e ÚLTIMA linha do "ChemicalSpeciesLabel"
#	Variavel
#		numero_linha	-	Variável de loop para armazenar o número da linha que
#                               está sendo lida no momento
#       linha           -   O que está sendo lido linha a linha
#
numero_linha=1      # Número da linha começa com 1

while IFS= read -r linha; do
    if [[ $linha == "%block ChemicalSpeciesLabel" ]]; then      # Verificando se a linha atual é o INÍCIO do ChemicalSpeciesLabel
        let linha_inicial=numero_linha 
        break
    fi

    let numero_linha=numero_linha+1
done < $nome_arquivo_fdf


numero_linha=1
while IFS= read -r linha; do

    if [[ $linha == "%endblock ChemicalSpeciesLabel" ]]; then   # Verificando se a linha atual é o FIM do ChemicalSpeciesLabel
        let linha_final=numero_linha
        break
    fi

    let numero_linha=numero_linha+1
done < $nome_arquivo_fdf




# Escrevendo a Matriz ChemicalSpeciesLabel
awk -v s="$linha_inicial" -v e="$linha_final" 'NR>s&&NR<e' $nome_arquivo_fdf > ChemicalSpeciesLabel.txt




# =================================================================================
#						Extrair simbolos do ChemicalSpeciesLabel
# =================================================================================
#	Objetivo:			-	Extrair somente os símbolos do ChemicalSpeciesLabel
#   Antes:              -   C_lda, B_lda, N_lda
#   Depois:             -   C, B, N

while IFS=" " read -r ignorar ignorar simbolo

    do echo $simbolo | cut -d"_" -f1

done < ChemicalSpeciesLabel.txt > ChemicalSpeciesLabel_cortado.txt





# =================================================================================
#						AtomicCoordinatesAndAtomicSpecies
# =================================================================================
#	Objetivo:			-	Identificar a PRIMEIRA e ÚLTIMA linha do "AtomicCoordinatesAndAtomicSpecies"
#	Variavel
#		numero_linha	-	Variável de loop para armazenar o número da linha que
#                               está sendo lida no momento
#       linha           -   O que está sendo lido linha a linha
#
numero_linha=1      # Número da linha começa com 1

while IFS= read -r linha; do
    if [[ $linha == "%block AtomicCoordinatesAndAtomicSpecies" ]]; then      # Verificando se a linha atual é o INÍCIO do ChemicalSpeciesLabel
        let linha_inicial_atomic_coordinates=numero_linha+1 
        break
    fi

    let numero_linha=numero_linha+1
done < $nome_arquivo_fdf


numero_linha=1
while IFS= read -r linha; do

    if [[ $linha == "%endblock AtomicCoordinatesAndAtomicSpecies" ]]; then   # Verificando se a linha atual é o FIM do ChemicalSpeciesLabel
        let linha_final_atomic_coordinates=numero_linha-1
        break
    fi

    let numero_linha=numero_linha+1
done < $nome_arquivo_fdf


# TODO: Melhorar esse loop, colocando as duas condições IF mesmo loop 

# Escrevendo as coordenadas XYZ no arquivo Matriz AtomicCoordinatesAndAtomicSpecies
awk -v s="2" -v e="500" 'NR>s&&NR<e' $nome_arquivo_xyz > AtomicCoordinatesAndAtomicSpecies.txt



# =================================================================================
#						Gerar cópia FDF
# =================================================================================
#	Objetivo:			-	Gerar uma cópia do arquivo.fdf para arquivo_novo.fdf

cp *.fdf final_${nome_arquivo_fdf}
log_verbose "Gerando cópia de $nome_arquivo_fdf \n"


# =================================================================================
#							VERIFICANDO SE copiador.f90 EXISTE
# =================================================================================
#	Objetivo:			-	Verificar se o arquivo copiador.f90 existe
if [ ! -f copiador.f90 ]; then			# Se copiador.f90 não existe, crie
	# Log terminal: Mostrar (se necessário) se estamos criando o arquivo fortran
    log_quiet "Criando arquivo Fortran"

	cat << EOF > copiador.f90
        PROGRAM Copiador
            IMPLICIT NONE

            ! ----------------------------------------------
            !   Vetores com os simbolos e coordenadas    
            ! ----------------------------------------------
                CHARACTER(len=2), DIMENSION(140) :: simbolos
                CHARACTER(len=2), DIMENSION(140) :: simbolos_cortados
                REAL, DIMENSION(140) :: x
                REAL, DIMENSION(140) :: y
                REAL, DIMENSION(140) :: z
            ! ----------------------------------------------

            ! ----------------------------------------------
            !   Variáveis para loops
            ! ----------------------------------------------
                INTEGER :: i
            ! ----------------------------------------------

                ! ----------------------------------------------
                !           UNIDADES DE ARQUIVOS ABERTOS
                ! ----------------------------------------------
                !   5 - ChemicalSpeciesLabel_cortado.txt
                !  10 - AtomicCoordinatesAndAtomicSpecies.txt
                !  12 - AtomicCoordinatesAndAtomicSpecies_trocado.txt
                !  
                ! ----------------------------------------------

                ! Abrindo arquivo ChemicalSpeciesLabel
                OPEN(UNIT=5, FILE='ChemicalSpeciesLabel_cortado.txt', status='OLD')

                    DO i=1, 6

                        READ(5,*) simbolos_cortados(i)

                    END DO

                CLOSE(5)    ! Fechando ChemicalSpeciesLabel_cortado.txt

                ! Abrindo 
                OPEN(UNIT=10, FILE='AtomicCoordinatesAndAtomicSpecies.txt', status='OLD')
                OPEN(UNIT=12, FILE='AtomicCoordinatesAndAtomicSpecies_trocado.txt', ACTION='WRITE')

                    DO i=1, 140

                        READ(10,*) simbolos(i), x(i), y(i), z(i)    ! Lendo coordenadas linha a linha de [ 10 ]
                        WRITE(12,100) x(i), y(i), z(i), simbolos(i) ! Gravando matriz com coluna trocada em arquivo texto em [ 12 ]
                            100 FORMAT (3F17.6  A10)              
                    END DO

                CLOSE(10)   ! fechando AtomicCoordinatesAndAtomicSpecies
                CLOSE(12)   ! fechando AtomicCoordinatesAndAtomicSpecies_trocado


            END PROGRAM Copiador
EOF
else
    # Log terminal: Mostrar (se necessário) se o arquivo .f90 já existe
    log_verbose "copiador.f90 já existe \n"
fi



# =================================================================================
#						Gerar cópia FDF
# =================================================================================
#	Objetivo:			-	Compilar e excecutar o programa FORTRAN compilado anteriormente

gfortran copiador.f90 -o copiador
./copiador



# =================================================================================
#						Gerar cópia FDF
# =================================================================================
#   Objetivo            -   Trocar simbolo atômico por seu números crescentes
#   Variável
#       simbolo         -   Simbolo químico a ser # TODO: continuar aqui e em baixo
#       numero          -   Número a ser
#       Antes       Depois
#         C           1
#         B           2
#         N           3
#    
numero=1
while read simbolo
    do

        sed -i "s/\b$simbolo\b/$numero/g" AtomicCoordinatesAndAtomicSpecies_trocado.txt

        let numero=numero+1

    done < ChemicalSpeciesLabel_cortado.txt





# =================================================================================
#						Remover Coordednadas Originais do FDF
# =================================================================================
#	Objetivo:			-	Remover as coordenadas originais do arquivo modelo do fdf
#                               (vamos apagar para colocar as coordenadas do arquivo xyz)
#
sed -i "${linha_inicial_atomic_coordinates},${linha_final_atomic_coordinates}d" final_$nome_arquivo_fdf





# Agora que os dados originais das coordenadas foram apagados, vou reescrever com os dados já processados
let linha_inicial_atomic_coordinates_menos_um=linha_inicial_atomic_coordinates-1
while IFS=" " read -r x y z numero

    do sed -i "${linha_inicial_atomic_coordinates_menos_um}a\ $(printf "%14.6f" $x) $(printf "%14.6f" $y) $(printf "%14.6f" $z) $(printf "%7d" $numero)" final_tBN80.fdf
    printf "$xf"

done < AtomicCoordinatesAndAtomicSpecies_trocado.txt 





# =================================================================================
#						Remover arquivos temporários
# =================================================================================
#	Objetivo:			-	Remover (se necessário) arquivos temporários 
#
if test "$KEEP_TEMP" = 0; then
    log_verbose "Deletando arquivos temporários \n"

    rm AtomicCoordinatesAndAtomicSpecies.txt
    rm AtomicCoordinatesAndAtomicSpecies_trocado.txt
    rm ChemicalSpeciesLabel.txt
    rm ChemicalSpeciesLabel_cortado.txt
    rm copiador
fi

echo 
echo "--------------------------------------------"             # Log terminal
printf " ${verde}final_${nome_arquivo_fdf}${limpar} gerado, por favor o revise \n"
echo "--------------------------------------------"             